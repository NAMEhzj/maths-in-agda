--library=maths

open import Agda.Primitive
open import Relation.Binary.Core
open import Data.Sum.Base
open import Relation.Nullary
open import Algebra.Field.Field renaming (Field to FD)
open import Algebra.VectorSpace.Core renaming (VectorSpace to VS)
open import Data.List hiding (sum)
open import Data.Fin hiding (_+_) renaming (zero to fzero)
open import Data.Product hiding (map)
open import Data.Nat using (‚Ñï)
open import Base.Equivalence
open import Data.Empty
open import Base.PropTruncation
open import NatAndFin
open import Data.Unit

module Algebra.VectorSpace.Subspace {k l} {F : Set k} {F' : FD F} {V : Set l} (V' : VS F' V) where

open import Base.Sets public

import Algebra.Field.FieldProps F' as FP
open import Algebra.VectorSpace.Props1 V'

open VS V'

record Subspace {m} (U : ùí´ V {m}) : Set (k ‚äî l ‚äî m) where
          field
           0‚ààU : zvect ‚àà U
           sumClosed : (x y : V) ‚Üí x ‚àà U ‚Üí y ‚àà U ‚Üí (x + y) ‚àà U
           scaleClosed : (x : V) ‚Üí (Œ± : F) ‚Üí x ‚àà U ‚Üí (Œ± ‚àô x) ‚àà U
           
open Subspace


subspace-sum-cong : ‚àÄ{m n} ‚Üí (U : ùí´ V {m}) ‚Üí (S : Subspace U) ‚Üí (vs : Fin n ‚Üí V) ‚Üí ((i : Fin n) ‚Üí (vs i) ‚àà U) ‚Üí sum vs ‚àà U
subspace-sum-cong {m} {‚Ñï.zero} U S vs vs‚ààU  = 0‚ààU S
subspace-sum-cong {m} {‚Ñï.suc n} U S vs vs‚ààU = sumClosed S (vs fzero) (sum (Œª i ‚Üí vs (suc i))) (vs‚ààU fzero)
                                                        (subspace-sum-cong U S (Œª i ‚Üí vs (suc i)) Œª i ‚Üí vs‚ààU (suc i))

wholeSpace : Subspace (wholeSet V)
0‚ààU wholeSpace = tt
sumClosed wholeSpace x y tt tt = tt
scaleClosed wholeSpace x Œ± tt = tt


zeroSpace : Subspace (singleton zvect)
0‚ààU zeroSpace = refl 
sumClosed zeroSpace x y x=0 y=0 = x + y     =‚ü® y=0 under x +_ ‚ü©
                                  x + zvect =‚ü® zeroRNeut x ‚ü©
                                  x         =‚ü® x=0 ‚ü©
                                  zvect ‚ñ°=
scaleClosed zeroSpace x Œ± x=0 = Œ± ‚àô x     =‚ü® x=0 under Œ± ‚àô_ ‚ü©
                                Œ± ‚àô zvect =‚ü® scale-zvect Œ± ‚ü©
                                zvect ‚ñ°=


generator : ‚àÄ{m n} ‚Üí ùí´ V {m} ‚Üí (Fin n ‚Üí V) ‚Üí Set (k ‚äî l ‚äî m)
generator U vs = (w : V) ‚Üí w ‚àà U ‚Üí Œ£ (linCombo vs) (Œª Œ±s ‚Üí eval vs Œ±s ‚â° w)

basis : ‚àÄ{m n} ‚Üí ùí´ V {m} ‚Üí (vs : Fin n ‚Üí V) ‚Üí Set (k ‚äî l ‚äî m)
basis U vs = linIndep vs √ó generator U vs


record linearProp {m} (P : V ‚Üí Set m) : Set (k ‚äî l ‚äî m) where
         field
          P0 : P zvect
          sumClosed : (x y : V) ‚Üí P x ‚Üí P y ‚Üí P (x + y)
          scaleClosed : (x : V) (Œ± : F) ‚Üí P x ‚Üí P (Œ± ‚àô x)

propSubspace : ‚àÄ{m} (P : V ‚Üí Set m) ‚Üí linearProp P ‚Üí Subspace (propSubset P)
0‚ààU (propSubspace P lP) = ‚à£ linearProp.P0 lP ‚à£
sumClosed (propSubspace P lP) x y = liftToTrunc2* (Œª Px Py ‚Üí ‚à£ linearProp.sumClosed lP x y Px Py ‚à£)
scaleClosed (propSubspace P lP) x Œ± = liftToTrunc* (Œª Px ‚Üí ‚à£ linearProp.scaleClosed lP x Œ± Px ‚à£)


{-
extract : ‚àÄ{m} (S : Subspace {m}) ‚Üí VS F' (Subspace.U S)
extract S = record
              { zvect = zvect*
              ; _+_  = _+*_
              ; -_   = -*_
              ; _‚àô_  = _‚àô*_
              ; addComm = Œª x y ‚Üí Subspace.injective S (x +* y) (y +* x)
                                (i (x +* y) =‚ü® proj‚ÇÇ (Subspace.sumClosed S x y) ‚ü©
                                 i x + i y  =‚ü® VS.addComm V' (i x) (i y) ‚ü©
                                 i y + i x  =‚ü® =sym (proj‚ÇÇ (Subspace.sumClosed S y x)) ‚ü©
                                 i (y +* x) ‚ñ°=)
              ; addAssoc  = Œª x y z ‚Üí Subspace.injective S (x +* (y +* z)) ((x +* y) +* z)
                                (i (x +* (y +* z)) =‚ü® proj‚ÇÇ (Subspace.sumClosed S x (y +* z)) ‚ü©
                                 i x + i (y +* z)  =‚ü® proj‚ÇÇ (Subspace.sumClosed S y z) under i x +_ ‚ü©
                                 i x + (i y + i z) =‚ü® VS.addAssoc V' (i x) (i y) (i z) ‚ü©
                                 (i x + i y) + i z =‚ü® =sym (proj‚ÇÇ (Subspace.sumClosed S x y) under _+ i z) ‚ü©
                                 i (x +* y) + i z  =‚ü® =sym (proj‚ÇÇ (Subspace.sumClosed S (x +* y) z)) ‚ü©
                                 i ((x +* y) +* z) ‚ñ°=)
              ; zeroLNeut = Œª x ‚Üí Subspace.injective S (zvect* +* x) x
                                (i (zvect* +* x) =‚ü® proj‚ÇÇ (Subspace.sumClosed S zvect* x) ‚ü©
                                 i zvect* + i x  =‚ü® proj‚ÇÇ (Subspace.0‚ààU S) under _+ i x ‚ü©
                                 zvect + i x     =‚ü® VS.zeroLNeut V' (i x) ‚ü©
                                 i x ‚ñ°=)
              ; zeroRNeut = Œª x ‚Üí Subspace.injective S (x +* zvect*) x
                                (i (x +* zvect*) =‚ü® proj‚ÇÇ (Subspace.sumClosed S x zvect*) ‚ü©
                                 i x + i zvect*  =‚ü® proj‚ÇÇ (Subspace.0‚ààU S) under i x +_ ‚ü©
                                 i x + zvect     =‚ü® VS.zeroRNeut V' (i x) ‚ü©
                                 i x ‚ñ°=)
              ; addLInv    = Œª x ‚Üí Subspace.injective S ((-* x) +* x) zvect*
                                 (i ((-* x) +* x)           =‚ü® proj‚ÇÇ (Subspace.sumClosed S (-* x) x) ‚ü©
                                 i (-* x) + i x             =‚ü® proj‚ÇÇ (Subspace.scaleClosed S x (-' one)) under _+ i x ‚ü©
                                 (-' one) ‚àô i x + i x       =‚ü® =sym (VS.oneNeut V' (i x)) under (-' one) ‚àô i x +_ ‚ü©
                                 (-' one) ‚àô i x + one ‚àô i x =‚ü® =sym (VS.scaleRDist V' (-' one) one (i x)) ‚ü©
                                 ((-' one) +' one) ‚àô i x    =‚ü® FD.addLInv F' one under _‚àô i x ‚ü©
                                 zero ‚àô i x                 =‚ü® zero-scale (i x) ‚ü©
                                 zvect                      =‚ü® =sym (proj‚ÇÇ (Subspace.0‚ààU S)) ‚ü©
                                 i zvect* ‚ñ°= )
              ; addRInv    = Œª x ‚Üí Subspace.injective S (x +* (-* x)) zvect*
                                 (i (x +* (-* x))           =‚ü® proj‚ÇÇ (Subspace.sumClosed S x (-* x)) ‚ü©
                                 i x + i (-* x)             =‚ü® proj‚ÇÇ (Subspace.scaleClosed S x (-' one)) under i x +_ ‚ü©
                                 i x + (-' one) ‚àô i x       =‚ü® =sym (VS.oneNeut V' (i x)) under _+ (-' one) ‚àô i x ‚ü©
                                 one ‚àô i x + (-' one) ‚àô i x =‚ü® =sym (VS.scaleRDist V' one (-' one) (i x)) ‚ü©
                                 (one +' (-' one)) ‚àô i x    =‚ü® FD.addRInv F' one under _‚àô i x ‚ü©
                                 zero ‚àô i x                 =‚ü® zero-scale (i x) ‚ü©
                                 zvect                      =‚ü® =sym (proj‚ÇÇ (Subspace.0‚ààU S)) ‚ü©
                                 i zvect* ‚ñ°= )
              ; scaleLDist = Œª Œ± v w ‚Üí Subspace.injective S (Œ± ‚àô* (v +* w)) ((Œ± ‚àô* v) +* (Œ± ‚àô* w))
                                    (i (Œ± ‚àô* (v +* w))      =‚ü® proj‚ÇÇ (Subspace.scaleClosed S (v +* w) Œ±) ‚ü©
                                    Œ± ‚àô i (v +* w)          =‚ü® proj‚ÇÇ (Subspace.sumClosed S v w) under Œ± ‚àô_ ‚ü©
                                    Œ± ‚àô (i v + i w)         =‚ü® VS.scaleLDist V' Œ± (i v) (i w) ‚ü©
                                    Œ± ‚àô i v + Œ± ‚àô i w       =‚ü® =sym (proj‚ÇÇ (Subspace.scaleClosed S v Œ±)) under _+ Œ± ‚àô i w ‚ü©
                                    i (Œ± ‚àô* v) + Œ± ‚àô i w    =‚ü® =sym (proj‚ÇÇ (Subspace.scaleClosed S w Œ±)) under i (Œ± ‚àô* v) +_ ‚ü©
                                    i (Œ± ‚àô* v) + i (Œ± ‚àô* w) =‚ü® =sym (proj‚ÇÇ (Subspace.sumClosed S (Œ± ‚àô* v) (Œ± ‚àô* w))) ‚ü©
                                    i ((Œ± ‚àô* v) +* (Œ± ‚àô* w)) ‚ñ°=)
              ; scaleRDist = Œª Œ± Œ≤ v ‚Üí Subspace.injective S ((Œ± +' Œ≤) ‚àô* v) ((Œ± ‚àô* v) +* (Œ≤ ‚àô* v))
                                    (i ((Œ± +' Œ≤) ‚àô* v)       =‚ü® proj‚ÇÇ (Subspace.scaleClosed S v (Œ± +' Œ≤)) ‚ü©
                                    (Œ± +' Œ≤) ‚àô i v           =‚ü® VS.scaleRDist V' Œ± Œ≤ (i v) ‚ü©
                                    Œ± ‚àô i v + Œ≤ ‚àô i v        =‚ü® =sym (proj‚ÇÇ (Subspace.scaleClosed S v Œ±)) under _+ Œ≤ ‚àô i v ‚ü©
                                    i (Œ± ‚àô* v) + Œ≤ ‚àô i v     =‚ü® =sym (proj‚ÇÇ (Subspace.scaleClosed S v Œ≤)) under i (Œ± ‚àô* v) +_ ‚ü©
                                    i (Œ± ‚àô* v) + i (Œ≤ ‚àô* v)  =‚ü® =sym (proj‚ÇÇ (Subspace.sumClosed S (Œ± ‚àô* v) (Œ≤ ‚àô* v))) ‚ü©
                                    i ((Œ± ‚àô* v) +* (Œ≤ ‚àô* v)) ‚ñ°=)
              ; scaleMultAssoc = Œª Œ± Œ≤ v ‚Üí Subspace.injective S ((Œ± * Œ≤) ‚àô* v) (Œ± ‚àô* (Œ≤ ‚àô* v))
                                    (i ((Œ± * Œ≤) ‚àô* v) =‚ü® proj‚ÇÇ (Subspace.scaleClosed S v (Œ± * Œ≤)) ‚ü©
                                     (Œ± * Œ≤) ‚àô i v    =‚ü® VS.scaleMultAssoc V' Œ± Œ≤ (i v) ‚ü©
                                     Œ± ‚àô (Œ≤ ‚àô i v)    =‚ü® =sym (proj‚ÇÇ (Subspace.scaleClosed S v Œ≤)) under Œ± ‚àô_ ‚ü©
                                     Œ± ‚àô i (Œ≤ ‚àô* v)   =‚ü® =sym (proj‚ÇÇ (Subspace.scaleClosed S (Œ≤ ‚àô* v) Œ±)) ‚ü©
                                     i (Œ± ‚àô* (Œ≤ ‚àô* v)) ‚ñ°=)
              ; oneNeut = Œª v ‚Üí Subspace.injective S (one ‚àô* v) v
                               (i (one ‚àô* v) =‚ü® proj‚ÇÇ (Subspace.scaleClosed S v one) ‚ü©
                                one ‚àô i v    =‚ü® VS.oneNeut V' (i v) ‚ü©
                                i v ‚ñ°=)
              ; isZvect = zeroDec'
              } where _+*_ = Œª x y ‚Üí proj‚ÇÅ (Subspace.sumClosed S x y)
                      _‚àô*_ = Œª Œ± x ‚Üí proj‚ÇÅ (Subspace.scaleClosed S x Œ±)
                      -*_ = (-' one) ‚àô*_
                      i = Subspace.i S
                      zvect* = proj‚ÇÅ (Subspace.0‚ààU S)
                      zeroDec' : (v : Subspace.U S) ‚Üí v ‚â° zvect* ‚äé ¬¨ v ‚â° zvect*
                      zeroDec' v with (isZvect (i v))
                      ... | (inj‚ÇÅ iv=0) = inj‚ÇÅ (Subspace.injective S v zvect* (i v    =‚ü® iv=0 ‚ü©
                                                                               zvect  =‚ü® =sym (proj‚ÇÇ (Subspace.0‚ààU S)) ‚ü©
                                                                               i zvect* ‚ñ°=))
                      ... | (inj‚ÇÇ iv‚â†0) = inj‚ÇÇ Œª v=0 ‚Üí iv‚â†0 (i v      =‚ü® v=0 under i ‚ü©
                                                             i zvect* =‚ü® proj‚ÇÇ (Subspace.0‚ààU S) ‚ü©
                                                             zvect ‚ñ°=)


generator-include : ‚àÄ{ls‚ÇÅ ls‚ÇÇ n} ‚Üí {U‚ÇÅ : Subspace {ls‚ÇÅ}} ‚Üí {U‚ÇÇ : Subspace {ls‚ÇÇ}} ‚Üí (bs : Fin n ‚Üí V) ‚Üí generator U‚ÇÅ bs ‚Üí ((i : Fin n) ‚Üí (bs i) ‚àà U‚ÇÇ) ‚Üí U‚ÇÅ ‚äÜ U‚ÇÇ
generator-include {ls‚ÇÅ} {ls‚ÇÇ} {n} {U‚ÇÅ} {U‚ÇÇ} bs bsGenU‚ÇÅ bs‚ààU‚ÇÇ v (x , ix=v) = ‚àà-eq-cong U‚ÇÇ (=sym Œ£Œ±sbs=v) (subspace-sum-cong U‚ÇÇ (Œª i ‚Üí Œ±s i ‚àô bs i) Œ±sbs‚ààU)
                                                              where v-in-bs*  = bsGenU‚ÇÅ v (x , ix=v)
                                                                    Œ±s        = proj‚ÇÅ v-in-bs*
                                                                    Œ£Œ±sbs=v   = proj‚ÇÇ v-in-bs*
                                                                    Œ±sbs‚ààU : (i : Fin n) ‚Üí Œ±s i ‚àô bs i ‚àà U‚ÇÇ
                                                                    Œ±sbs‚ààU i = subspace-scale-cong U‚ÇÇ (bs i) (Œ±s i) (bs‚ààU‚ÇÇ i)
-}
